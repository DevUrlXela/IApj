import neurolab as nl
import pylab as pl
import numpy as np

np.set_printoptions(suppress=True)
# Logical &
entrada = [[0.0,0.0,0.0,0.0,0.0,0.0,0.0,92.94],
[0.0,0.0,54.61,0.0,0.06,42.39,0.0,1.96],
[0.0,0.0,16.1,0.0,0.0,1.43,3.31,79.16],
[0.0,0.0,31.33,0.0,0.0,0.0,6.04,62.37],
[0.0,0.0,28.78,0.0,0.0,0.65,28.55,41.94],
[0.0,0.0,24.24,1.22,0.0,70.18,0.45,3.9],
[0.0,0.0,14.73,0.0,0.0,3.78,3.1,78.18],
[0.0,0.0,0.37,0.0,0.0,84.61,8.24,0.0],
[0.0,0.0,0.0,0.0,0.0,3.45,0.0,55.63],
[0.0,0.0,0.57,0.0,0.0,84.06,12.98,0.0],
[1.06,0.0,14.37,0.0,0.0,5.47,38.82,35.45],
[0.0,0.0,40.86,0.02,0.0,54.86,2.88,0.94],
[0.0,0.0,17.33,0.0,0.0,51.41,12.29,12.27],
[0.0,0.0,24.1,0.14,0.0,69.73,0.08,4.49],
[0.0,0.0,8.63,0.0,0.0,0.0,0.0,91.29],
[0.0,0.0,42.67,0.0,0.0,0.0,2.67,54.65],
[0.0,0.0,48.57,0.0,0.0,26.12,0.27,13.02],
[0.0,0.0,54.73,0.0,0.0,0.0,0.0,45.27],
[0.0,0.0,8.61,0.0,0.0,67.76,18.35,5.29],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,98.47],
[0.0,0.0,60.02,0.0,0.0,34.41,4.49,0.63],
[0.0,0.0,21.29,0.0,0.0,12.94,63.12,2.59],
[0.0,0.0,0.0,0.0,0.0,0.18,0.0,86.35],
[0.0,0.0,22.24,0.0,0.0,44.94,16.71,13.96],
[0.0,0.0,0.16,0.0,0.0,68.86,7.59,0.0],
[0.0,0.0,50.51,0.0,0.22,44.12,0.0,1.96],
[0.0,0.0,35.31,0.43,0.0,61.33,0.92,1.55],
[0.76,0.0,0.08,0.0,3.0,26.61,0.73,40.78],
[0.0,0.0,1.86,0.0,0.0,1.88,0.02,87.86],
[0.0,0.0,10.92,0.0,0.0,41.94,11.47,35.65],
[0.0,0.0,4.8,0.0,0.0,0.0,0.0,95.02],
[0.0,0.0,38.18,0.0,0.0,58.69,2.02,0.63],
[0.55,0.0,0.02,0.0,3.02,29.1,0.65,37.41],
[0.0,0.0,10.06,0.0,0.0,0.0,85.41,4.53],
[0.0,0.0,1.78,0.0,0.0,79.86,17.27,0.43],
[0.0,0.0,14.06,0.0,0.0,1.61,1.73,81.02],
[0.0,0.0,22.14,0.04,0.0,72.57,3.92,1.29],
[0.0,0.0,0.0,0.0,0.1,0.0,0.0,33.33],
[0.0,0.0,52.86,0.0,0.0,47.14,0.0,0.0],
[0.0,0.0,86.24,0.0,0.0,0.0,0.0,13.76],
[0.0,0.0,25.29,0.0,0.0,40.49,20.14,12.61],
[0.0,0.0,27.69,0.0,0.59,65.8,0.0,0.73],
[0.0,0.0,31.33,0.0,0.0,5.22,39.14,24.16],
[0.0,0.0,22.8,0.0,0.0,46.94,0.1,12.45],
[0.04,0.08,0.16,0.0,0.0,24.2,45.29,0.1],
[0.9,0.0,0.73,0.0,0.0,2.59,84.59,0.9],
[0.0,0.0,0.45,0.0,0.0,38.24,12.65,0.0],
[0.0,2.37,0.22,0.0,0.0,18.9,5.84,0.0],
[1.45,0.0,0.14,0.0,7.08,23.63,23.82,1.16],
[0.55,0.0,20.31,0.0,0.0,0.24,59.59,18.06],
[5.76,0.0,1.86,0.0,0.0,12.12,36.71,2.88],
[0.06,0.0,3.84,0.0,0.08,42.02,10.29,9.43],
[0.0,0.0,1.06,0.0,0.0,44.37,10.53,0.35],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,92.94],
[0.2,1.51,0.18,0.0,0.0,24.31,50.31,0.24],
[0.0,0.0,0.04,0.0,0.16,93.0,0.0,1.08],
[0.67,0.1,0.04,0.0,0.0,1.29,91.98,0.08],
[1.04,0.0,1.96,0.0,1.55,37.47,16.04,3.92],
[0.67,0.14,0.0,0.0,0.0,0.82,92.92,0.18],
[0.0,0.84,0.0,0.0,0.0,3.9,0.0,0.0],
[0.37,0.0,1.27,0.0,0.0,2.02,75.43,15.55],
[0.0,0.0,27.69,0.02,0.0,65.8,3.9,1.02],
[0.0,0.0,31.33,0.0,0.0,0.0,6.04,62.37],
[0.0,0.0,0.02,0.0,0.06,22.69,54.98,0.0],
[0.0,0.0,0.27,0.0,0.0,47.94,38.59,0.0],
[0.0,0.0,0.0,0.0,0.0,24.2,42.92,0.0],
[0.0,0.0,0.27,0.0,0.0,37.35,62.39,0.0],
[0.0,0.0,0.88,0.0,0.0,82.96,16.12,0.0],
[0.0,0.0,0.0,0.0,0.0,31.8,0.0,0.0],
[0.0,0.02,3.69,0.0,0.0,45.0,23.96,15.67],
[0.0,0.61,0.02,0.0,4.27,83.39,3.22,0.02],
[0.0,2.0,0.65,0.0,0.0,29.47,7.71,0.0],
[0.0,0.0,1.69,0.0,0.0,97.14,0.0,0.0],
[0.0,4.22,1.2,0.0,0.0,25.57,3.41,0.0],
[0.12,0.0,0.24,0.0,0.0,17.37,43.73,0.22],
[0.0,0.0,1.0,0.45,0.0,91.33,5.02,0.0],
[0.0,6.82,0.04,0.0,0.0,9.14,1.02,1.02],
[0.0,0.0,14.73,0.0,0.0,3.78,3.1,78.18],
[0.0,0.0,0.0,0.0,0.0,82.82,17.18,0.0],
[0.14,0.0,5.51,0.0,0.0,1.12,71.04,0.22],
[0.0,0.0,0.31,0.0,0.0,58.41,8.2,0.06],
[0.0,0.0,0.0,0.0,0.0,3.45,0.0,55.63],
[0.22,0.37,0.04,0.0,0.0,19.8,57.49,0.0],
[0.53,0.35,0.08,0.0,0.0,38.18,43.22,0.14],
[0.8,0.0,0.16,0.0,1.14,36.59,26.59,0.41],
[1.33,0.0,0.51,0.0,1.88,13.96,64.27,0.0],
[0.0,0.0,0.0,0.0,0.0,87.71,0.14,0.0],
[1.06,0.0,0.61,0.0,0.02,1.55,90.53,1.1],
[0.0,2.37,0.0,0.0,0.22,81.33,1.45,0.0],
[0.0,0.12,0.0,0.0,0.0,77.33,3.82,0.0],
[0.0,0.0,0.0,0.0,0.0,22.71,54.55,0.0],
[0.0,0.0,1.0,0.45,0.0,91.33,5.02,0.0],
[0.0,0.0,0.41,0.0,0.27,65.82,31.45,0.0],
[2.76,0.0,10.69,0.0,0.0,8.49,55.16,21.14],
[0.0,0.0,0.29,0.0,0.0,79.2,11.82,0.0],
[1.06,0.0,14.37,0.0,0.0,5.47,38.82,35.45],
[0.0,0.0,0.45,0.0,0.0,71.27,19.29,0.0],
[1.45,0.04,0.8,0.0,0.0,4.63,81.43,1.31],
[0.12,2.2,0.33,0.0,0.0,41.57,24.96,0.06],
[0.0,0.0,0.27,0.0,0.0,75.33,2.69,0.08]]

target = [[0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 1, 0],
[0, 0, 0, 1, 0, 0],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 1, 0],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 1, 0],
[0, 0, 1, 0, 0, 0],
[1, 0, 0, 0, 0, 0],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 1, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 0],
[0, 0, 0, 1, 0, 0],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 1, 0, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 1, 0],
[0, 0, 0, 1, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 1, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 1],
[0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 0],
[0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 1, 0],
[0, 1, 0, 0, 0, 0],
[0, 1, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 1, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 1, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 1, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 1, 0, 0],
[0, 1, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 1, 0],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 1, 0],
[0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 1, 0],
[0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 1, 0, 0, 0, 0],
[0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 0],
[1, 0, 0, 0, 0, 0],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1],
[0, 0, 0, 1, 0, 0],
[0, 1, 0, 0, 0, 0]]

# Create net with 2 inputs and 1 neuron
#net = nl.net.newp([[0, 1],[0, 1]], 1)

#nl.net.newff([[-0.5, 0.5], [-0.5, 0.5]], [3, 1])  Tres neuronas en capa oculta, una en capa de salida
net = nl.net.newff([[-12, 12]]*8, [100, 6])

print(net.ci)
print(net.co)
# train with delta rule
# see net.trainf
error = net.train(entrada, target, epochs=500000, show=100, goal=0.03)

# Plot results
out = net.sim(entrada)
pl.plot(error)
#pl.plot(out)
#pl.plot(target)
pl.xlabel('Epoch number')
pl.ylabel('Train error')
pl.grid()
pl.show()
print (out)
print ("\n\nError:\n")
print (error[-1])
print ("\n\nPesos:\n")
for i in range(0,len(net.layers)):
    print ("Net layer", i)
    print (net.layers[i].np['w'])

net.save('test.net')
#net = nl.load('test.net')

#net = newff([[-0.5, 0.5], [-0.5, 0.5]], [3, 1])
